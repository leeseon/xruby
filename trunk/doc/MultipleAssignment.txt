
Implementation of Multiple Assignment in XRuby

Xue Yong Zhi
Last significant update: 09/23/2006

NOTE: this article explains how multiple assignment is currently implemented in 
XRuby. Although we have done lots of  testing, the implementation may contain errors, 
even major design flaws.


Introduction
=========

Multiple assignment is a (unnecessary) complicated feature in Ruby. "Programming 
Ruby, Second Edition" has a good summary of the basic rules (the book calls it "Parallel 
Assignment"):

* If the last rvalue is prefixed with an asterisk and implements to_ary, the 
rvalue is replaced with the elements of the array, with each element forming its own 
rvalue.

* If the assignment contains multiple lvalues and one rvalue, the rvalue is 
converted into an Array, and this array is expanded into a set of rvalues as described 
in (1).

* Successive rvalues are assigned to the lvalues. This assignment effectively 
happens in parallel, so that (for example) a,b=b,a swaps the values in a and b.

* If there are more lvalues than rvalues, the excess will have nil assigned 
to them.

* If there are more rvalues than lvalues, the excess will be ignored.

* These rules are modified slightly if the last lvalue is preceded with an 
asterisk. This lvalue will always receive an array during the assignment. The array will 
consist of whatever rvalue would normally have been assigned to this lvalue, followed 
by the excess rvalues (if any).

* If an lvalue contains a parenthesized list, the list is treated as a nested 
assignment statement, and then it is assigned from the corresponding rvalue as described 
by these rules.

It is very hard to remember, right? But here is the worse: it is still not complete. During the 
implementation we have found a few corner cases which can not be explained using the above 
rules. TODO examples.


Implementation in Detail
==================

Here is the code example:
a, b, c, *d = 1, [2, 3], *[4, 5, 6]


Step 1: Create an array, and add all rhs into it:
	//create the array
	RubyArray rhs_as_array = new RubyArray(2, true);

	// add 1
	rhs_as_array.add(ObjectFactory.createFixnum(1));

	//create [2, 3], and add it uing add() method
	RubyArray array_2_3 = new RubyArray(2, true);
	array_2_3.add(ObjectFactory.createFixnum(2));
	array_2_3.add(ObjectFactory.createFixnum(3));
	rhs_as_array.add(ObjectFactory.createArray(array_2_3));
	
	//create [4, 5, 6], and add it uing expand() method
	RubyArray array_4_5_6 = new RubyArray(3, true); 
	array_4_5_6.add(ObjectFactory.createFixnum(4));
	array_4_5_6.add(ObjectFactory.createFixnum(5));
	array_4_5_6.add(ObjectFactory.createFixnum(6));
	rhs_as_array.expand(ObjectFactory.createArray(array_4_5_6));

It is easy to add 1, [2, 3] into the array. For [4, 5], since is prefixed with an 
asterisk, we need to use expand() method instead of the add() method. 

Since then, rhs_as_array becomes [1, [2, 3], 4, 5, 6].


Step 2: 
	For n number of no asterisk lhs, push 0..n-1 elements of rhs_as_array on to 
	stack. If there is asterisk lhs, push the value using collect() method. 

The stack will look like this:

| rhs_as_array.collect(3) => [5, 6] | <- Top of the stack
-----------------------------------
| rhs_as_array.get(2)     => 4       |
-----------------------------------
| rhs_as_array.get(1)     => [2, 3] |
-----------------------------------
| rhs_as_array.get(0)     => 1       |
-----------------------------------

Step 3:

Pop the values off the stack, and assign them to lhs (from right to left). The result 
becomes:

d == [5, 6]
c == 4
b == [2, 3]
a == 1


Step 1, 2, 3 is a simplified version of the real implementation. It has not 
considered cases like: 1) there is only one non asterisk lhs; 2) there is only one asterisk rhs.
In particular, 2 is more complicated, rhs_as_array has to carry a special flag to indicate the 
situation. TODO explain more


Different Forms of Multiple Assignment
=============================

Multiple assignment not only appears in it normal form, but in return/yield
expression, parameter passing etc as well. For example:

def f
	return 1, 2 *[3, 4]
end

a = f()


def g(a, b, *c)
end

g(1, 2 *[3, 4])


def h
	yield  1, 2 *[3, 4]
end

h {|a, b, *c|}





