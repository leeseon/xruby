<html>
<head>
<title>XRuby Hacking Guide</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
</head>
<body>

<h2>XRuby Hacking Guide</h2>
<i>
Xue Yong Zhi (zhixueyong AT hotmail DOT com), <br/>
Ye Zheng (dreamhead.cn AT gmail DOT com) <br/>
<br/>
翻译：dennis_zane (killme2008 AT gmail.com)
</i>

<p>注意：本文尚在写作中。最近修改于2006年10月15日</p>

<h3>目录</h3>
<p><a href="#intro">介绍</a></p>
<p><a href="#howto">如何编译Ruby?</a></p>
<p><a href="#example">例子</a></p>
<p><a href="#code_organization">代码结构</a></p>
<p><a href="#builtin">内建库</a></p>
<p><a href="#parser">XRuby的解析器</a></p>
<p><a href="#trouble_shooting">疑难处理</p>

<h3><a name="intro">介绍</a></h3>
<p>
本文的目标是帮助用户/开发者理解XRuby的实现。
</p>


<h3><a name="howto">如何编译Ruby?</a></h3>
<p>
怎么将Ruby编译成Java字节码呢？首先，你不必成为一名字节码方面的专家来考虑这个问题，Java的字节码是对原生机器指令的一个较高层次的抽象，非常接近Java源代码。因此，你就可以这样考虑这个问题：如何用Java表示Ruby程序？
</p>

<p>
两种语言有很多的相同之处：Ruby是一门OO语言，它有类、方法、变量等，Java也是如此。
这是否意味着我们可以将Ruby类映射为Java类，Ruby方法作为Java方法呢？除了这些相同之处外，它们之间有足够的不同点让你打消这个主意：首先，Ruby是一种动态类型语言，因此方法可以接受不同类型的参数，而在Java中，参数类型是方法签名（signature）的一部分。其次，在Ruby中，可以动态增删类中的方法；但是目前的JVM并不能很好的支持这样的行为。需要指出的是，上述问题也许会在未来版本的JVM中得到解决，请参考Gilad Bracha在<a href="http://www.jcp.org/en/jsr/detail?id=292">JSR 292</a>上的工作。
</p>

<p>
一种方法是我们自己维护一个类型系统，这正是XRuby目前采用的办法（Ruby.net好像也是如此）。从JVM的角度看，Ruby类只是个Object，其中包含其它Object，用以表示方法等。对此，我们后面会进行更多的讨论。
</p>

<p>
另一种方法是动态地编译(Ruby)源代码。在运行时获得类型信息，将代码编译成高效代码是可能的（一些方法由于duck typeing的特性将被编译成好几个版本）。
</p>

<p>
TODO：将比较这两种方法。
</p>

<h3><a name="#example">例子</a></h3>
让我们通过一个例子来更多的理解XRuby：

<pre>
def say_hello_three_times
	3.times {puts 'hello'}
end

say_hello_three_times
</pre>
我们将上面的代码存为test.rb，使用XRuby编译：
<pre>
java -jar xruby-0.3.3.jar -c test.rb
</pre>
然后，我们得到一个test.jar文件，执行下面的命令运行这个程序：

<pre>
java -jar test.jar
</pre>

<p>
当然，你会看到下面的输出：
</p>

<pre>
hello
hello
hello
</pre>

如果你查看test.jar文件，你会看到以下3个class文件：
<li>test/BLOCK$1.class</li>
<li>test/say_hello_three_times$0.class</li>
<li>test/main.class</li>
<br>
这些class文件等价于下面这段java程序：
<pre>
//test/main.class
public class main
    implements RubyProgram
{

    public main()
    {
    }

    public static void main(String args[])
    {
    	RubyRuntime.init(args);
        (new main()).run();
        RubyRuntime.fini();
    }

    public RubyValue run()
    {
        RubyRuntime.ObjectClass.defineMethod("say_hello_three_times", new say_hello_three_times._cls0());
        return RubyRuntime.callMethod(ObjectFactory.topLevelSelfValue, null, null, "say_hello_three_times");
    }
}


//say_hello_three_times$0.class
class say_hello_three_times$0 extends RubyMethod
{

    protected RubyValue run(RubyValue rubyvalue, RubyArray arrayvalue, RubyBlock rubyblock)
    {
        return RubyRuntime.callPublicMethod(ObjectFactory.createFixnum(3), null, new BLOCK._cls1(), "times");
    }

    public say_hello_three_times$0()
    {
        super(0, false);
    }
}


//test/BLOCK$1.class
class BLOCK$1 extends RubyBlock
{

    protected RubyValue run(RubyValue rubyvalue, RubyArray arrayvalue)
    {
        RubyArray arrayvalue1 = new RubyArray(1);
        arrayvalue1.add(ObjectFactory.createString("hello"));
        return RubyRuntime.callMethod(rubyvalue, arrayvalue1, null, "puts");
    }

    public BLOCK$1()
    {
        super(0, false);
    }
}


</pre>

<p>
main类表示程序：首先在"Object"类中定义了一个私有的方法“say_hello_three_times”，然后调用这个方法，没有参数，没有block，以顶层的“self”作为接收者。
</p>
<p>
“say_hello_three_times$0”类表示say_hello_three_times方法的实现（参考command模式）。在代码中，我们可以看到Fixnum “3”(接收者）调用"timer"这个方法，仍然没有parameter（null），但是传进去一个block。

</p>

<p>
BLOCK$1类表示传给"3.times"方法中的block，其主体是“puts 'hello'”的实现。
</p>

<h3><a name="code_organization">代码结构</a></h3>
<p>
<ul> 

<li> 
<b>com.xruby.compiler.parser</b> 
提供了一个compiler前端(parser和tree parser)。
parser将Ruby脚本转换成AST（抽象语法树，Abstract Syntax Tree），
然后tree parser将AST转换为内部结构（internal structure）。
<br/> 
编译器前端使用 Antlr 作为语法分析器的生成器。将这个前端分为两部分（parser和tree parser）是一种好的实践；parser
解析脚本，tree parser生成内部结构（internal structure）。
</li> 

<li> 
<b>com.xruby.compiler.codedom</b> 
定义了描述Ruby脚本结构的内部结构（internal structure）。内部结构作为前端和后端的接口，这对于XRuby来说是非常重要的。
</li> 

<li>
<b>com.xruby.compiler.codegen</b> 
实现了编译器的后端（代码生成）。
后端将前端生成的内部结构转换为Java字节码。代码生成是通过ASM实现的，它简化了对字节码的操作。
</li> 

<li> 
<b>com.xruby.runtime</b> 
实现了XRuby运行时（runtime），它维护着运行Ruby脚本必需的类型系统，
 <b>com.xruby.runtime.lang</b> 
 描述了ruby类型的运行时结构，一些标准库实现在
 <b>com.xruby.runtime.builtin</b>中。 
</li> 

</ul> 

</p>

<h3><a name="builtin">内建库</a></h3>
<p>
通往xuby hacking之路最简便的办法就是学习'com.xruby.runtime.builtin'包的源代码。
</p>

<p>
下面的代码片段表明如何实现Fixnum::+方法：
</p>


<pre>

class Fixnum_operator_plus extends RubyMethod {
	public Fixnum_operator_plus() {
		super(1);
	}

	protected RubyValue run(RubyValue receiver, RubyArray args, RubyBlock block) {
		RubyFixnum value1 = (RubyFixnum)receiver.getValue();
		RubyFixnum value2 = (RubyFixnum)args.get(0).getValue();
		return ObjectFactory.createFixnum(value1.intValue() + value2.intValue());
	}
}

...
RubyClass c = RubyRuntime.GlobalScope.defineNewClass("Fixnum", RubyRuntime.IntegerClass);
c.defineMethod(CommonRubyID.plusID, new Fixnum_operator_plus());
...
</pre>


<h3><a name="parser">XRuby's Parser</a></h3>
<p>
XRuby的解析器使用
 <a href="http://www.antlr.org">Antlr</a> 作为解析器的生成器。
 这是目前除C Ruby之外唯一可选的Ruby语法。
</p>

<p>
对于大部分编程语言来说，词法分析（lexing）和语法解析（parsing）是两个不同的步骤：
首先词法分析器将输入的字符组织成记号（token），然后解析器将记号组织成句法单元。但是在Ruby（和Perl）中，词法分析器和语法解析器是紧紧地耦合在一起的：有时候词法分析器需要从语法分析器中获取上下文信息（比如，双引号字符串中的表达式替换）！
</p>

<h3><a name="trouble_shooting">疑难解决</a></h3>
<p>
作为XRuby的开发者，我们的修改都可能导致编译器出错，生成有问题的字节码。发生这种情况时，我们有三种工具可以依赖：javap、ASM和你所喜欢的Java反编译器(这里推荐<a href="http://www.kpdus.com/jad.html">jad</a>）
</p>

<p>
如果生成的class文件格式正确但是运行结果不是预期的，我们可以简单地用反编译工具将字节码转换成可读的Java源代码，以便查找错误。
 
</p>

<p>
如果你遇到是一个验证错误（verifier error），大部分的反编译器都不能正常工作（jad在这种情况也许会简单崩溃）。我们不得不使用javap来研读字节码。多数情况下，JVM class验证器（verifier）给出的信息没什么用处，但是我们可以通过ASM快速地定位错误。(见ASM FAQ: <a href=" http://asm.objectweb.org/doc/faq.html#Q4">Why do I get the [xxx] verifier error?</a>). 
</p>

</body>
</html>
